{"root":{"data":{"id":"d34elc5upa80","created":1722498032757,"text":"Flutter组件"},"children":[{"data":{"id":"d34elxsikq80","created":1722498079840,"text":"无状态组件","layout_mind_offset":{"x":7,"y":2}},"children":[{"data":{"id":"d34en39tpb40","created":1722498170135,"text":"StatelessWidget"},"children":[{"data":{"id":"d34f28ddkww0","created":1722499356696,"text":"基础布局"},"children":[]},{"data":{"id":"d34f294dcew0","created":1722499358328,"text":"进阶布局"},"children":[]},{"data":{"id":"d34f29u111c0","created":1722499359880,"text":"风格组件"},"children":[]},{"data":{"id":"d34hjot0ojs0","created":1722506366881,"text":"滚动布局","note":"相信使用过一段时间Flutter的开发者应该或多或少听说过Sliver这个词。从Flutter开发者社区讨论中也可以看出，不少人对Sliver这个概念很迷惑，甚至产生了抵触的情绪。其实sliver在英文里是“片段”的意思，例如一小块奶酪（a sliver of cheese）、月牙（a sliver of the moon）、一丝希望（a sliver of hope）等都可以用这个单词。\n在Flutter中，Sliver是指滚动视窗中的一小块区域。不同于普通的RenderBox主导的布局，Sliver组件的背后是由遵守“Sliver协议”的RenderSliver负责渲染，支持动态加载，在元素较多时非常高效。Sliver组件名称一般由Sliver...开头，在与普通的组件混搭时需要转换协议；"},"children":[{"data":{"id":"d34hkkw6krk0","created":1722506436729,"text":"SliverToBoxAdapter","note":"SliverToBoxAdapter组件就可帮助开发者将常见的RenderBox布局协议转换为Sliver协议。布局时，它首先将父级约束SliverConstraints转换为BoxConstraints，布局完毕后再将子组件最终确定的Size转换为SliverGeometry并汇报给父级组件。\n另外，SliverToBoxAdapter的子组件（child属性）非必传。若子组件为空，则该组件可作为一个空白Sliver使用，其功能类似RenderBox世界中的空白SizedBox组件"},"children":[]}]}]}]},{"data":{"id":"d34em9h6o5s0","created":1722498105276,"text":"有状态组件","layout_mind_offset":{"x":7,"y":106}},"children":[{"data":{"id":"d34en8afmog0","created":1722498181055,"text":"StatefulWidget"},"children":[{"data":{"id":"d34f28ddkww0","created":1722499356696,"text":"基础布局"},"children":[]},{"data":{"id":"d34f294dcew0","created":1722499358328,"text":"进阶布局"},"children":[]},{"data":{"id":"d34f29u111c0","created":1722499359880,"text":"风格组件"},"children":[]}]}]},{"data":{"id":"d34emerrd3k0","created":1722498116800,"text":"继承式组件","layout_mind_offset":{"x":641,"y":-193},"note":"其主要作用是将任意信息方便且高效地传递给组件树中的所有下级组件。\n一般情况下，若将某些数据传给子组件，开发者需通过在子组件的构造函数中直接添加参数实现。例如Text组件就是通过接收一个字符串获取需要渲染的数据，但当组件嵌套多层，而数据又需要被深层的下级组件访问时，若通过上述办法，层层传递参数则可能会使代码显得凌乱，使用继承式组件就可以很好地解决这个问题。\n示例：\nclass MyInheritedColor extends InheritedWidget {\n\n  final Color textColor;\n\n  const MyInheritedColor(this.textColor, {super.key, required super.child});\n\n  @override\n  bool updateShouldNotify(covariant MyInheritedColor oldWidget) {\n    // TODO: implement updateShouldNotify\n    return oldWidget.textColor != textColor;\n  }\n  static  MyInheritedColor? of(BuildContext context) => context.dependOnInheritedWidgetOfExactType<MyInheritedColor>();\n}","priority":null,"background":"#ff0000","color":"#ffffff"},"children":[{"data":{"id":"d34emykm3u00","created":1722498159903,"text":"InheritedWidget"},"children":[]}]},{"data":{"id":"d34fd550d9s0","created":1722500211665,"text":"动画","layout_mind_offset":{"x":630,"y":-4},"note":"当动画需要精确控制时，使用显示动画\n否则就选择隐式动画\n当Flutter框架提供的隐式动画和显式动画组件都不足以满足实际需求时，也可以考虑使用TweenAnimationBuilder自定义隐式动画，或使用AnimatedBuilder自定义显式动画。尤其是后者，若再配合CustomPaint等支持随意绘制的画布组件，则更可完成一切动画需求，但显然这么做难免会增加代码的难度，延长开发周期，因此实战中选择合适的动画组件相对重要。\n\n\n显式动画组件通常以...Transition结尾，如FadeTransition、SlideTransition、SizeTransition等。在使用显式动画时，开发者需要自行创建并维护一个AnimationController（动画控制器），通过它来控制动画的开始、暂停、重置、跳转、倒播等操作。\n"},"children":[{"data":{"id":"d34fd8x0bgo0","created":1722500219889,"text":"显式动画Animated..."},"children":[]},{"data":{"id":"d34fdfvz3fs0","created":1722500235064,"text":"隐式动画...Transition"},"children":[]}]},{"data":{"id":"d3kc7b1u3r40","created":1724116250326,"text":"常用组件"},"children":[{"data":{"id":"d3kc7mo0iw00","created":1724116275612,"text":"FlutterLogo"},"children":[]},{"data":{"id":"d3kc7z6i8vc0","created":1724116302851,"text":"PlaceHolder"},"children":[]},{"data":{"id":"d3kc84idndc0","created":1724116314453,"text":"Container"},"children":[]},{"data":{"id":"d3kc8944mv40","created":1724116324476,"text":"Column"},"children":[]},{"data":{"id":"d3kc8d6res80","created":1724116333342,"text":"Row"},"children":[]},{"data":{"id":"d3kc8f3ido00","created":1724116337499,"text":"Wrap"},"children":[]},{"data":{"id":"d3kc8l1lwkg0","created":1724116350444,"text":"Positioned","layout_left_offset":{"x":-44,"y":3}},"children":[]},{"data":{"id":"d3kc8r1f7v40","created":1724116363494,"text":"SizedBox","layout_left_offset":{"x":-44,"y":3}},"children":[]},{"data":{"id":"d3kc8xu6law0","created":1724116378295,"text":"Center","layout_left_offset":{"x":-44,"y":3}},"children":[]},{"data":{"id":"d3kc8j7ruu00","created":1724116346464,"text":"Stack"},"children":[]},{"data":{"id":"d3kc906r0yo0","created":1724116383407,"text":"Align"},"children":[]},{"data":{"id":"d3kc959jffc0","created":1724116394460,"text":"文字和图片"},"children":[{"data":{"id":"d3kh5r2kkq80","created":1724130234020,"text":"Text"},"children":[]},{"data":{"id":"d3kh5ub5aw80","created":1724130241069,"text":"RichText"},"children":[]},{"data":{"id":"d3kh5x1gd7s0","created":1724130247014,"text":"DefaultTextStyle"},"children":[]},{"data":{"id":"d3kh62xt7t40","created":1724130259854,"text":"Icon"},"children":[]},{"data":{"id":"d3kh66bebx40","created":1724130267206,"text":"IconTheme"},"children":[]},{"data":{"id":"d3kh67oeb7k0","created":1724130270169,"text":"Image"},"children":[]},{"data":{"id":"d3kh69sv1eo0","created":1724130274792,"text":"FadeInImage"},"children":[]}]},{"data":{"id":"d3kh6wmzsm80","created":1724130324503,"text":"交互"},"children":[{"data":{"id":"d3kh72kml940","created":1724130337421,"text":"TextField"},"children":[]},{"data":{"id":"d3kh76v953s0","created":1724130346771,"text":"CupertinoTextfield"},"children":[]},{"data":{"id":"d3kh7gzgt9s0","created":1724130368793,"text":"TextButton"},"children":[]},{"data":{"id":"d3kh7iro1dc0","created":1724130372675,"text":"ElevateButton"},"children":[]},{"data":{"id":"d3kh7p1w1qo0","created":1724130386354,"text":"CupertinoButton"},"children":[]},{"data":{"id":"d3kh7u0dvvk0","created":1724130397147,"text":"GestureDetector"},"children":[]}]},{"data":{"id":"d3kh85yqcyg0","created":1724130423168,"text":"异步操作"},"children":[{"data":{"id":"d3kh8o9195s0","created":1724130462973,"text":"CircularProgressIndicator"},"children":[]},{"data":{"id":"d3kh92eqd2o0","created":1724130493793,"text":"LinerProgressIndicator"},"children":[]},{"data":{"id":"d3kh99t5v4w0","created":1724130509903,"text":"分支主题"},"children":[]}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}