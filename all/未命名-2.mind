{"root":{"data":{"id":"d34elc5upa80","created":1722498032757,"text":"Flutter组件"},"children":[{"data":{"id":"d34elxsikq80","created":1722498079840,"text":"无状态组件","layout_mind_offset":{"x":7,"y":2}},"children":[{"data":{"id":"d34en39tpb40","created":1722498170135,"text":"StatelessWidget"},"children":[{"data":{"id":"d34f28ddkww0","created":1722499356696,"text":"基础布局"},"children":[]},{"data":{"id":"d34f294dcew0","created":1722499358328,"text":"进阶布局"},"children":[]},{"data":{"id":"d34f29u111c0","created":1722499359880,"text":"风格组件"},"children":[]}]}]},{"data":{"id":"d34em9h6o5s0","created":1722498105276,"text":"有状态组件","layout_mind_offset":{"x":7,"y":106}},"children":[{"data":{"id":"d34en8afmog0","created":1722498181055,"text":"StatefulWidget"},"children":[{"data":{"id":"d34f28ddkww0","created":1722499356696,"text":"基础布局"},"children":[]},{"data":{"id":"d34f294dcew0","created":1722499358328,"text":"进阶布局"},"children":[]},{"data":{"id":"d34f29u111c0","created":1722499359880,"text":"风格组件"},"children":[]}]}]},{"data":{"id":"d34emerrd3k0","created":1722498116800,"text":"继承式组件","layout_mind_offset":{"x":641,"y":-193},"note":"其主要作用是将任意信息方便且高效地传递给组件树中的所有下级组件。\n一般情况下，若将某些数据传给子组件，开发者需通过在子组件的构造函数中直接添加参数实现。例如Text组件就是通过接收一个字符串获取需要渲染的数据，但当组件嵌套多层，而数据又需要被深层的下级组件访问时，若通过上述办法，层层传递参数则可能会使代码显得凌乱，使用继承式组件就可以很好地解决这个问题。\n示例：\nclass MyInheritedColor extends InheritedWidget {\n\n  final Color textColor;\n\n  const MyInheritedColor(this.textColor, {super.key, required super.child});\n\n  @override\n  bool updateShouldNotify(covariant MyInheritedColor oldWidget) {\n    // TODO: implement updateShouldNotify\n    return oldWidget.textColor != textColor;\n  }\n  static  MyInheritedColor? of(BuildContext context) => context.dependOnInheritedWidgetOfExactType<MyInheritedColor>();\n}","priority":null,"background":"#ff0000","color":"#ffffff"},"children":[{"data":{"id":"d34emykm3u00","created":1722498159903,"text":"InheritedWidget"},"children":[]}]},{"data":{"id":"d34fd550d9s0","created":1722500211665,"text":"动画","layout_mind_offset":{"x":630,"y":-4},"note":"当动画需要精确控制时，使用显示动画\n否则就选择隐式动画\n\n显式动画组件通常以...Transition结尾，如FadeTransition、SlideTransition、SizeTransition等。在使用显式动画时，开发者需要自行创建并维护一个AnimationController（动画控制器），通过它来控制动画的开始、暂停、重置、跳转、倒播等操作。\n"},"children":[{"data":{"id":"d34fd8x0bgo0","created":1722500219889,"text":"显式动画Animated..."},"children":[]},{"data":{"id":"d34fdfvz3fs0","created":1722500235064,"text":"隐式动画...Transition"},"children":[]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}