{"root":{"data":{"id":"d34elc5upa80","created":1722498032757,"text":"Flutter组件"},"children":[{"data":{"id":"d34elxsikq80","created":1722498079840,"text":"无状态组件","layout_mind_offset":{"x":7,"y":2}},"children":[{"data":{"id":"d34en39tpb40","created":1722498170135,"text":"StatelessWidget"},"children":[{"data":{"id":"d34f28ddkww0","created":1722499356696,"text":"基础布局"},"children":[]},{"data":{"id":"d34f294dcew0","created":1722499358328,"text":"进阶布局"},"children":[]},{"data":{"id":"d34f29u111c0","created":1722499359880,"text":"风格组件"},"children":[]},{"data":{"id":"d34hjot0ojs0","created":1722506366881,"text":"滚动布局","note":"相信使用过一段时间Flutter的开发者应该或多或少听说过Sliver这个词。从Flutter开发者社区讨论中也可以看出，不少人对Sliver这个概念很迷惑，甚至产生了抵触的情绪。其实sliver在英文里是“片段”的意思，例如一小块奶酪（a sliver of cheese）、月牙（a sliver of the moon）、一丝希望（a sliver of hope）等都可以用这个单词。\n在Flutter中，Sliver是指滚动视窗中的一小块区域。不同于普通的RenderBox主导的布局，Sliver组件的背后是由遵守“Sliver协议”的RenderSliver负责渲染，支持动态加载，在元素较多时非常高效。Sliver组件名称一般由Sliver...开头，在与普通的组件混搭时需要转换协议；"},"children":[{"data":{"id":"d34hkkw6krk0","created":1722506436729,"text":"SliverToBoxAdapter","note":"SliverToBoxAdapter组件就可帮助开发者将常见的RenderBox布局协议转换为Sliver协议。布局时，它首先将父级约束SliverConstraints转换为BoxConstraints，布局完毕后再将子组件最终确定的Size转换为SliverGeometry并汇报给父级组件。\n另外，SliverToBoxAdapter的子组件（child属性）非必传。若子组件为空，则该组件可作为一个空白Sliver使用，其功能类似RenderBox世界中的空白SizedBox组件"},"children":[]}]}]}]},{"data":{"id":"d34em9h6o5s0","created":1722498105276,"text":"有状态组件","layout_mind_offset":{"x":7,"y":106}},"children":[{"data":{"id":"d34en8afmog0","created":1722498181055,"text":"StatefulWidget"},"children":[{"data":{"id":"d34f28ddkww0","created":1722499356696,"text":"基础布局"},"children":[]},{"data":{"id":"d34f294dcew0","created":1722499358328,"text":"进阶布局"},"children":[]},{"data":{"id":"d34f29u111c0","created":1722499359880,"text":"风格组件"},"children":[]}]}]},{"data":{"id":"d34emerrd3k0","created":1722498116800,"text":"继承式组件","layout_mind_offset":{"x":641,"y":-193},"note":"其主要作用是将任意信息方便且高效地传递给组件树中的所有下级组件。\n一般情况下，若将某些数据传给子组件，开发者需通过在子组件的构造函数中直接添加参数实现。例如Text组件就是通过接收一个字符串获取需要渲染的数据，但当组件嵌套多层，而数据又需要被深层的下级组件访问时，若通过上述办法，层层传递参数则可能会使代码显得凌乱，使用继承式组件就可以很好地解决这个问题。\n示例：\nclass MyInheritedColor extends InheritedWidget {\n\n  final Color textColor;\n\n  const MyInheritedColor(this.textColor, {super.key, required super.child});\n\n  @override\n  bool updateShouldNotify(covariant MyInheritedColor oldWidget) {\n    // TODO: implement updateShouldNotify\n    return oldWidget.textColor != textColor;\n  }\n  static  MyInheritedColor? of(BuildContext context) => context.dependOnInheritedWidgetOfExactType<MyInheritedColor>();\n}","priority":null,"background":"#ff0000","color":"#ffffff"},"children":[{"data":{"id":"d34emykm3u00","created":1722498159903,"text":"InheritedWidget"},"children":[]}]},{"data":{"id":"d34fd550d9s0","created":1722500211665,"text":"动画","layout_mind_offset":{"x":630,"y":-4},"note":"当动画需要精确控制时，使用显示动画\n否则就选择隐式动画\n当Flutter框架提供的隐式动画和显式动画组件都不足以满足实际需求时，也可以考虑使用TweenAnimationBuilder自定义隐式动画，或使用AnimatedBuilder自定义显式动画。尤其是后者，若再配合CustomPaint等支持随意绘制的画布组件，则更可完成一切动画需求，但显然这么做难免会增加代码的难度，延长开发周期，因此实战中选择合适的动画组件相对重要。\n\n\n显式动画组件通常以...Transition结尾，如FadeTransition、SlideTransition、SizeTransition等。在使用显式动画时，开发者需要自行创建并维护一个AnimationController（动画控制器），通过它来控制动画的开始、暂停、重置、跳转、倒播等操作。\n"},"children":[{"data":{"id":"d34fd8x0bgo0","created":1722500219889,"text":"显式动画Animated..."},"children":[]},{"data":{"id":"d34fdfvz3fs0","created":1722500235064,"text":"隐式动画...Transition"},"children":[]}]},{"data":{"id":"d3kc7b1u3r40","created":1724116250326,"text":"常用组件"},"children":[{"data":{"id":"d3kc7mo0iw00","created":1724116275612,"text":"FlutterLogo"},"children":[]},{"data":{"id":"d3kc7z6i8vc0","created":1724116302851,"text":"PlaceHolder"},"children":[]},{"data":{"id":"d3kc84idndc0","created":1724116314453,"text":"Container"},"children":[]},{"data":{"id":"d3khjkxv3mw0","created":1724131317773,"text":"拆分布局"},"children":[{"data":{"id":"d3kc8944mv40","created":1724116324476,"text":"Column"},"children":[]},{"data":{"id":"d3kc8d6res80","created":1724116333342,"text":"Row"},"children":[]},{"data":{"id":"d3kc8f3ido00","created":1724116337499,"text":"Wrap"},"children":[]},{"data":{"id":"d3kc8j7ruu00","created":1724116346464,"text":"Stack"},"children":[]}]},{"data":{"id":"d3khj0ze4rs0","created":1724131274330,"text":"位置"},"children":[{"data":{"id":"d3kc8l1lwkg0","created":1724116350444,"text":"Positioned","layout_left_offset":{"x":-44,"y":3}},"children":[]},{"data":{"id":"d3kc8r1f7v40","created":1724116363494,"text":"SizedBox","layout_left_offset":{"x":-44,"y":3}},"children":[]},{"data":{"id":"d3kc8xu6law0","created":1724116378295,"text":"Center","layout_left_offset":{"x":-44,"y":3}},"children":[]},{"data":{"id":"d3kc906r0yo0","created":1724116383407,"text":"Align"},"children":[]}]},{"data":{"id":"d3kc959jffc0","created":1724116394460,"text":"文字和图片"},"children":[{"data":{"id":"d3kh5r2kkq80","created":1724130234020,"text":"Text"},"children":[]},{"data":{"id":"d3kh5ub5aw80","created":1724130241069,"text":"RichText"},"children":[]},{"data":{"id":"d3kh5x1gd7s0","created":1724130247014,"text":"DefaultTextStyle"},"children":[]},{"data":{"id":"d3kh62xt7t40","created":1724130259854,"text":"Icon"},"children":[]},{"data":{"id":"d3kh66bebx40","created":1724130267206,"text":"IconTheme"},"children":[]},{"data":{"id":"d3kh67oeb7k0","created":1724130270169,"text":"Image"},"children":[]},{"data":{"id":"d3kh69sv1eo0","created":1724130274792,"text":"FadeInImage","note":"若需要在图片加载的过程中暂时显示另一张替代图片，并在图片加载完毕后平滑过渡，就可以使用FadeInImage组件。通常替代图片可被迅速加载，而原图可能会耗时较久。作为替代的素材图片通常可以是一张本地资源包图片（如一个可爱的“正在努力加载哟”的GIF动图）或是一张能较快加载的小图（如预览图或缩略图）等。","progress":9,"priority":null},"children":[]}]},{"data":{"id":"d3kh6wmzsm80","created":1724130324503,"text":"交互"},"children":[{"data":{"id":"d3kh72kml940","created":1724130337421,"text":"TextField"},"children":[]},{"data":{"id":"d3kh76v953s0","created":1724130346771,"text":"CupertinoTextfield"},"children":[]},{"data":{"id":"d3kh7gzgt9s0","created":1724130368793,"text":"TextButton"},"children":[]},{"data":{"id":"d3kh7iro1dc0","created":1724130372675,"text":"ElevateButton"},"children":[]},{"data":{"id":"d3kh7p1w1qo0","created":1724130386354,"text":"CupertinoButton"},"children":[]},{"data":{"id":"d3kh7u0dvvk0","created":1724130397147,"text":"GestureDetector"},"children":[]}]},{"data":{"id":"d3kh85yqcyg0","created":1724130423168,"text":"异步操作"},"children":[{"data":{"id":"d3kh8o9195s0","created":1724130462973,"text":"CircularProgressIndicator"},"children":[]},{"data":{"id":"d3kh92eqd2o0","created":1724130493793,"text":"LinerProgressIndicator"},"children":[]},{"data":{"id":"d3kh99t5v4w0","created":1724130509903,"text":"CupertinoActivityIndicator"},"children":[]},{"data":{"id":"d3kh9p12r2g0","created":1724130543034,"text":"FutureBuilder"},"children":[]},{"data":{"id":"d3kh9sy3ifc0","created":1724130551560,"text":"StreamBuilder"},"children":[]}]},{"data":{"id":"d3kha67chso0","created":1724130580418,"text":"列表和网格"},"children":[{"data":{"id":"d3khafcua140","created":1724130600341,"text":"ListView"},"children":[]},{"data":{"id":"d3khahqh8mg0","created":1724130605519,"text":"ListWheelScrollView"},"children":[]},{"data":{"id":"d3khayjo8bc0","created":1724130642113,"text":"ReorderbalListView"},"children":[]},{"data":{"id":"d3khb6qr0280","created":1724130659955,"text":"GridView"},"children":[]},{"data":{"id":"d3khb98w7zc0","created":1724130665406,"text":"PageView"},"children":[]}]},{"data":{"id":"d3kha976n8g0","created":1724130586938,"text":"滚动控制和监听"},"children":[{"data":{"id":"d3khbxbqm880","created":1724130717820,"text":"ScrollBar"},"children":[]},{"data":{"id":"d3khc1l4qc80","created":1724130727095,"text":"RefreshIndicator","note":"RefreshIndicator（刷新指示器）组件可为大部分滚动列表添加“下拉刷新”的功能，但它目前只支持垂直方向滚动的列表。使用时只需要在滚动列表（如ListView）组件的父级插入RefreshIndicator组件，并通过onRefresh参数传入刷新时的业务逻辑","progress":9},"children":[]},{"data":{"id":"d3khcaasz340","created":1724130746062,"text":"Dismissible","note":"Dismissible原意是“可被清除的”，因此这个Flutter组件主要用于帮助开发者实现看似复杂的“滑动清除”效果。例如，在电子邮箱管理软件中经常可以看到滑动即可删除某封电子邮件的功能。这个组件最常放在ListView之类的列表中，作为列表children的每个Widget的父级组件，为所有元素添加滑动清除功能，但Dismissible也可被用于其他任何接收Widget类型的场景。\n使用时需要在可被清除的组件的父级插入Dismissible，并传入一个key（键）。如可在ListView组件的itemBuilder中返回Dismissible组件并利用child属性继续指定子组件","progress":9},"children":[]},{"data":{"id":"d3khd97eeww0","created":1724130822044,"text":"ScrollConfiguration","note":"如果需要改变一部分或全部列表的默认样式，则可以使用ScrollConfiguration组件。这种思路与同时设置所有子Text组件的DefaultTextStyle组件，或同时设置所有子Icon组件的IconTheme组件类似，所有列表类组件的默认样式是由最近上级的ScrollConfiguration组件提供的，因此，若需要全局设置整个应用程序的所有列表默认样式，则可将ScrollConfiguration组件插入接近组件树根部的位置。若只需设置某个列表的默认样式，则应把ScrollConfiguration组件直接插入该列表组件的父级，从而避免干扰到其他的列表。","progress":9},"children":[]},{"data":{"id":"d3khduon3nc0","created":1724130868799,"text":"NotificationListener","note":"滚动类的列表组件如ListView或GridView等，在滚动的过程中会产生滚动通知事件。这类通知事件会沿着组件树向上冒泡（Bubble Up），直到被某个监听该通知事件的组件拦截为止。\n也可以监听来自Notification发送的事件","progress":9},"children":[]},{"data":{"id":"d3khdxkseog0","created":1724130875096,"text":"SigleChildScrollerView","progress":9},"children":[]}]},{"data":{"id":"d3khlll61vk0","created":1724131475911,"text":"边界"},"children":[]},{"data":{"id":"d3khlrcj9uw0","created":1724131488449,"text":"弹性布局"},"children":[]},{"data":{"id":"d3khltevs4g0","created":1724131492945,"text":"约束"},"children":[]},{"data":{"id":"d3khlvll0kg0","created":1724131497704,"text":"过渡动画"},"children":[]},{"data":{"id":"d3khlyprunc0","created":1724131504487,"text":"触摸检测"},"children":[]},{"data":{"id":"d3khm7brcf40","created":1724131523231,"text":"拖放"},"children":[]},{"data":{"id":"d3khmgjml3k0","created":1724131543298,"text":"悬浮"},"children":[{"data":{"id":"d3kiqyyxu740","created":1724134717972,"text":"OverlayEntry"},"children":[]},{"data":{"id":"d3kir1hl90g0","created":1724134723454,"text":"CompositionedTransformTarget"},"children":[]}]},{"data":{"id":"d3khmlwhmq80","created":1724131554960,"text":"弹窗"},"children":[{"data":{"id":"d3kho7310200","created":1724131679431,"text":"AlertDialog"},"children":[]},{"data":{"id":"d3khoctx7zk0","created":1724131691942,"text":"SimpleDialog","note":"这是一个Material风格的简易对话框，常用于提供多个选项并让用户选择其中一项。该对话框支持可选的title属性，用于显示一个标题以及children属性，用于提供多个选项。为保持Material风格统一，这里推荐向每个选项都传入SimpleDialogOption组件;"},"children":[]},{"data":{"id":"d3khon4w5j40","created":1724131714374,"text":"CupertinoPopupSurface","note":"这是Cupertino风格对话框的背景板，Flutter也将其作为一个组件，方便大家在此基础上继续开发。它所呈现的视觉效果是iOS系统中常见的圆角边白底模糊背景，可含一个child组件。使用时也可以通过isSurfacePainted：false将白色背景关闭，只保留模糊效果"},"children":[]},{"data":{"id":"d3kilog5ub40","created":1724134303248,"text":"ModalBarrier","note":"弹出的对话框与主程序之间通常有一层屏障，这就是ModalBarrier组件。它主要有color和dismissible这2个参数，分别用于定义颜色和是否应在轻触后自动消除。由于本章之前介绍的showDialog（）方法已经自带了barrierColor和barrierDismissible参数，可用于直接定义其自带的屏障的相应行为，因此很少需要直接使用ModalBarrier组件。\n"},"children":[]},{"data":{"id":"d3kimrpo92w0","created":1724134388718,"text":"BottomSheet"},"children":[]},{"data":{"id":"d3kimtq1wyw0","created":1724134393095,"text":"DraggableScrollableSheet","note":"这是一个可支持滚动且可被用户拖动以便改变高度的组件。它的高度在初始状态下默认为父级组件高度的50%，并可以随着用户向上和向下拖动的手势将自身的高度改为父级的25%~100%。它的内容部分通常会被渲染为一个ListView列表\n\n"},"children":[]},{"data":{"id":"d3kinudq2o80","created":1724134472890,"text":"CupertinoActionSheet","note":"这个组件负责渲染iOS风格的底部选项卡。其内容通常为数个CupertinoActionSheetAction组件所组成的选项列表，由actions参数传入，最终整个选项卡再通过showCupertinoModalPopup（）方法从屏幕下方弹出"},"children":[]}]},{"data":{"id":"d3khmp8m0io0","created":1724131562223,"text":"界面导航"},"children":[{"data":{"id":"d3khnvok0dc0","created":1724131654612,"text":"Navigator","note":"导航器通过维护内部的一个栈（stack，数据结构，不是Stack组件）来管理各个页面组件，并通过调用Overlay悬浮的方式，将多个页面叠加，以保证最新的页面显示在最顶层。同时Overlay也可以协助页面切换的过程，例如可在新页面切入的过程中不断更改新页面的位置，以实现滑入的动画效果等。"},"children":[]},{"data":{"id":"d3khnz7v5y00","created":1724131662310,"text":"WillPopScope","note":"这是一个可在当前页面即将被关闭之前否决关闭指令的组件。使用时需异步返回一个布尔值，表示是否同意关闭窗口。例如返回值为false即可阻止当前窗口被关闭;\n当需要关闭当前窗口时，只要WillPopScope组件存在于当前页面的任意位置，其onWillPop函数就会被调用。若异步返回值为true，则程序可继续正常关闭窗口，否则就会取消关闭窗口的行为。\n若存在多个WillPopScope同时可见，则Flutter会依次询问。这些WillPopScope组件均有“一票否决权”，即只有它们全部都同意关闭时，当前窗口才会被关闭。\n例如可在一个ListView列表中为每个元素添加WillPopScope组件，并设置序号为5的元素不同意关闭窗口，其他元素均同意关闭"},"children":[]},{"data":{"id":"d3kho2r5yg00","created":1724131670007,"text":"Hero","note":"在平面设计或网页设计领域中，Hero一词是指放在首页醒目位置的一个较大的横幅图片。在Flutter中，Hero组件可用于实现页面切换时，保留醒目元素始终可见，并加入渐变动画的效果。\n例如某程序在2个不同页面中使用了相同的文字或图片，借助Hero组件可为这些相同元素建立联系。具体做法是在2个页面的元素的父级都插入Hero组件，并传入相同的tag属性"},"children":[]}]},{"data":{"id":"d3khmqrjcz40","created":1724131565544,"text":"程序结构"},"children":[{"data":{"id":"d3khnd723t40","created":1724131614372,"text":"WidgetApp"},"children":[]},{"data":{"id":"d3khnfp3so00","created":1724131619816,"text":"MaterialApp"},"children":[]},{"data":{"id":"d3khnj2m8aw0","created":1724131627164,"text":"CupertinoApp"},"children":[]}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}