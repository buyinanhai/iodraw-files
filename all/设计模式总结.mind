{"root":{"data":{"id":"d3m6e2qokx40","created":1724302974041,"text":"设计模式"},"children":[{"data":{"id":"d3m6kg8mko00","created":1724303473609,"text":"原则"},"children":[{"data":{"id":"d3m6kkfuzco0","created":1724303482753,"text":"单一职责"},"children":[]},{"data":{"id":"d3m6kmibtc00","created":1724303487256,"text":"开放封闭"},"children":[]},{"data":{"id":"d3m6m8vg1eo0","created":1724303614303,"text":"迪米特法则"},"children":[]},{"data":{"id":"d3m6mph1c2o0","created":1724303650437,"text":"依赖倒转"},"children":[]},{"data":{"id":"d3m6nvyzeao0","created":1724303742947,"text":"里氏替换"},"children":[]},{"data":{"id":"d3m6usoctx40","created":1724304284323,"text":"接口隔离"},"children":[]},{"data":{"id":"d3m6uv4qn1k0","created":1724304289667,"text":"合成复用"},"children":[]}]},{"data":{"id":"d3m6vgmnz1c0","created":1724304336463,"text":"行为型","layout_mind_offset":{"x":121,"y":-76}},"children":[{"data":{"id":"d3m6xzwvn5c0","created":1724304535168,"text":"观察者"},"children":[]},{"data":{"id":"d3m6y2ze5b40","created":1724304541851,"text":"模版方法"},"children":[]},{"data":{"id":"d3m6y5dabi80","created":1724304547044,"text":"命令","image":"https://www.runoob.com/wp-content/uploads/2014/08/20220427-command-1-command-1.svg","imageTitle":"命令模式结构图","imageSize":{"width":200,"height":167},"layout_right_offset":{"x":8,"y":2}},"children":[]},{"data":{"id":"d3m6y6zpw680","created":1724304550577,"text":"状态"},"children":[]},{"data":{"id":"d3m6y8cu0740","created":1724304553547,"text":"职责链"},"children":[]},{"data":{"id":"d3m6ycxih880","created":1724304563505,"text":"解释器"},"children":[]},{"data":{"id":"d3m6ym9fauw0","created":1724304583816,"text":"中介者"},"children":[]},{"data":{"id":"d3m6yss2csg0","created":1724304598004,"text":"访问者"},"children":[]},{"data":{"id":"d3m6yxwbua80","created":1724304609146,"text":"策略"},"children":[]},{"data":{"id":"d3m6yzmg65c0","created":1724304612902,"text":"备忘录"},"children":[]},{"data":{"id":"d3m6z37nwnk0","created":1724304620715,"text":"迭代器"},"children":[]}]},{"data":{"id":"d3m6vjn22740","created":1724304343017,"text":"结构型模式"},"children":[{"data":{"id":"d3m6wb4x6pk0","created":1724304402871,"text":"单例"},"children":[]},{"data":{"id":"d3m6wcqdtgw0","created":1724304406345,"text":"工厂方法"},"children":[]},{"data":{"id":"d3m6wgc2fow0","created":1724304414187,"text":"抽象工厂"},"children":[]},{"data":{"id":"d3m6wis93000","created":1724304419519,"text":"建造者"},"children":[]},{"data":{"id":"d3m6wlccmpk0","created":1724304425088,"text":"原型"},"children":[]}]},{"data":{"id":"d3m6vnveubs0","created":1724304352230,"text":"结构型模式"},"children":[{"data":{"id":"d3m6wvp5vkg0","created":1724304447630,"text":"适配器"},"children":[{"data":{"id":"d3qfbb0mjxc0","created":1724734386779,"text":"使用场景","layout_left_offset":{"x":8,"y":-3}},"children":[{"data":{"id":"d3qfco6urfk0","created":1724734493818,"text":"系统的数据和行为都正确，但接口不符时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况， 比如在需要对早起代码复用一些功能等应用上很有实际价值"},"children":[]}]},{"data":{"id":"d3qfbf1d7j40","created":1724734395531,"text":"定义"},"children":[{"data":{"id":"d3qfburdqxs0","created":1724734429756,"text":"将一个类的接口转换成客户希望的另外一个接口。Adapter使得原本由于接口不兼容而不能一起工作的那些类可以一起工作；"},"children":[]}]},{"data":{"id":"d3qfbi822800","created":1724734402466,"text":"代码","note":"class Target\n{\n    public virtual void Request（）\n    {\n        Console.WriteLine（\"普通请求！\"）;\n    }\n}\n\nclass Adaptee\n{\n    public void SpecificRequest（）\n    {\n        Console.WriteLine（\"特殊请求！\"）;\n    }\n}\n\n"},"children":[]}]},{"data":{"id":"d3m6xbboy540","created":1724304481644,"text":"装饰"},"children":[{"data":{"id":"d3qfbb0mjxc0","created":1724734386779,"text":"使用场景","layout_left_offset":{"x":8,"y":-3}},"children":[{"data":{"id":"d3qfco6urfk0","created":1724734493818,"text":"系统的数据和行为都正确，但接口不符时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况， 比如在需要对早起代码复用一些功能等应用上很有实际价值"},"children":[]}]},{"data":{"id":"d3qfbf1d7j40","created":1724734395531,"text":"定义"},"children":[{"data":{"id":"d3qfburdqxs0","created":1724734429756,"text":"动态的给对象添加一些额外的职责，就增加功能来说比生成子类更加灵活","layout_left_offset":{"x":-103,"y":0}},"children":[]}]},{"data":{"id":"d3qfbi822800","created":1724734402466,"text":"代码","note":"abstract class Component\n{\n    public abstract void Operation（）;\n}\n\nclass ConcreteComponent : Component\n{\n    public override void Operation（）\n    {\n        Console.WriteLine（\"具体对象的操作\"）;\n    }\n}\n\n"},"children":[]}]},{"data":{"id":"d3m6xdg1crs0","created":1724304486261,"text":"桥接"},"children":[]},{"data":{"id":"d3m6xgh0cvc0","created":1724304492850,"text":"组合"},"children":[]},{"data":{"id":"d3m6xhyfo800","created":1724304496080,"text":"享元"},"children":[]},{"data":{"id":"d3m6xoydhww0","created":1724304511314,"text":"代理"},"children":[]},{"data":{"id":"d3m6xpqppr40","created":1724304513028,"text":"外观"},"children":[]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}